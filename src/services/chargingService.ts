
import { supabase } from '@/integrations/supabase/client';

export interface ChargingBooking {
  id?: string;
  customer_name: string;
  customer_phone: string;
  vehicle_number: string;
  charging_station_id: string;
  start_time: string;
  estimated_duration: number;
  status: 'booked' | 'active' | 'completed' | 'cancelled';
  total_amount?: number;
  created_at?: string;
}

export const createChargingBooking = async (booking: Omit<ChargingBooking, 'id' | 'created_at'>): Promise<ChargingBooking> => {
  const { data, error } = await supabase
    .from('pos_charging_orders')
    .insert({
      customer_name: booking.customer_name,
      customer_phone: booking.customer_phone,
      vehicle_number: booking.vehicle_number,
      charging_station_id: booking.charging_station_id,
      start_time: booking.start_time,
      status: booking.status,
      rate_per_unit: 15, // Default rate per unit
      total_amount: 0, // Will be calculated later
      payment_status: 'pending',
      order_number: '' // Will be auto-generated by the database trigger
    })
    .select()
    .single();
  
  if (error) throw error;
  
  // Update charging station status
  await supabase
    .from('charging_stations')
    .update({ status: 'occupied' })
    .eq('id', booking.charging_station_id);
  
  // Transform the database response to match our ChargingBooking interface
  return {
    id: data.id,
    customer_name: data.customer_name,
    customer_phone: data.customer_phone || '',
    vehicle_number: data.vehicle_number || '',
    charging_station_id: data.charging_station_id || '',
    start_time: data.start_time || '',
    estimated_duration: booking.estimated_duration, // Use the original estimated duration
    status: data.status as 'booked' | 'active' | 'completed' | 'cancelled',
    total_amount: data.total_amount,
    created_at: data.created_at
  };
};

export const getAvailableChargingStations = async () => {
  const { data, error } = await supabase
    .from('charging_stations')
    .select('*')
    .eq('status', 'available')
    .order('station_id');
  
  if (error) throw error;
  return data || [];
};

export const getChargingBookings = async () => {
  const { data, error } = await supabase
    .from('pos_charging_orders')
    .select(`
      *,
      charging_stations (
        station_id,
        type,
        power
      )
    `)
    .order('created_at', { ascending: false });
  
  if (error) throw error;
  return data || [];
};
